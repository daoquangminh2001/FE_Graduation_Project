{"ast":null,"code":"var _jsxFileName = \"E:\\\\NewApp\\\\Project_Nh-m2\\\\my-app\\\\src\\\\Components\\\\Slideshow\\\\Slideshow.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Slideshow extends React.Component {\n  constructor(props) {\n    super(props);\n\n    /*\r\n    * State slideIndex dùng để xác định xem slide nào đang được active.\r\n    * Các ảnh sẽ được xếp chồng lên nhau, cái nào active thì hiển thị,\r\n    * Cái nào không active thì ẩn đi.\r\n    */\n    this.state = {\n      slideIndex: 0\n    };\n\n    /*\r\n    * Khi sử dụng, mình sẽ truyền thuộc tính ratio, giả sử là \"3:2\"\r\n    * Như vậy, tỉ lệ width/height là this.ratioWH = 3 / 2\r\n    * Mình sẽ điều chỉnh các ảnh sao cho về cùng 1 kích thước.\r\n    */\n    const ratioWHArray = this.props.ratio.split(\":\");\n    this.ratioWH = ratioWHArray[0] / ratioWHArray[1];\n    this.backward = this.backward.bind(this);\n    this.forward = this.forward.bind(this);\n    this.setSlideIndex = this.setSlideIndex.bind(this);\n    this.getNewSlideIndex = this.getNewSlideIndex.bind(this);\n    this.updateDimensions = this.updateDimensions.bind(this);\n    this.runAutomatic = this.runAutomatic.bind(this);\n  }\n\n  /*\r\n  * Tính chỉ số SlideIndex mới, với step là bước nhảy: +1 hoặc -1\r\n  * Giả sử, mình có 6 ảnh => các chỉ số lần lượt là: 0, 1, 2,...5\r\n  * Chú ý:\r\n  * Nếu đang ở chỉ số 5 mà đi về phía trước thì slideIndex = 0\r\n  * Nếu đang ở chỉ số 0 mà về sau thì slideIndex = 5\r\n  */\n  getNewSlideIndex(step) {\n    const slideIndex = this.state.slideIndex;\n    const numberSlide = this.props.input.length;\n    let newSlideIndex = slideIndex + step;\n    if (newSlideIndex >= numberSlide) newSlideIndex = 0;else if (newSlideIndex < 0) newSlideIndex = numberSlide - 1;\n    return newSlideIndex;\n  }\n\n  // Quay về ảnh phía trước, tức index giảm 1 => step = -1\n  backward() {\n    this.setState({\n      slideIndex: this.getNewSlideIndex(-1)\n    });\n  }\n\n  // Tiến tới ảnh phía sau, tức index tăng 1 => step = 1\n  forward() {\n    this.setState({\n      slideIndex: this.getNewSlideIndex(1)\n    });\n  }\n\n  // Xác định slideIndex nào sẽ được active\n  setSlideIndex(index) {\n    this.setState({\n      slideIndex: index\n    });\n  }\n\n  /*\r\n  * Cập nhật chiều cao cho container khi thay đổi kích thước màn hình\r\n  * Trong phần CSS, mình để container có width = 100%,\r\n  * Nên dù kéo to hay thu nhỏ thì width vẫn bằng 100%\r\n  * Nhưng chiều cao phải tính lại dựa vào width và tỉ lệ this.ratioWH\r\n  */\n  updateDimensions() {\n    this.containerElm.style.height = `${this.containerElm.offsetWidth / this.ratioWH}px`;\n  }\n\n  /*\r\n  * Nếu người dùng truyền vào thuộc tính mode = automatic\r\n  * thì Slideshow sẽ chạy tự động dựa vào interval.\r\n  * Hàm này sẽ được gọi trong mỗi lượt lặp lại\r\n  * để cập nhật slideIndex mới cho Slideshow\r\n  */\n  runAutomatic() {\n    this.setState({\n      slideIndex: this.getNewSlideIndex(1)\n    });\n  }\n\n  /*\r\n  * Hàm này thuộc về React Component Lifecycle\r\n  * được gọi sau khi component này được render xong\r\n  * Trong đây, sẽ lưu lại reference cho container - this.containerElm\r\n  * Cập nhật lại chiều cao cho container - this.updateDimensions();\r\n  * Đăng ký sự kiện thay đổi kích thước - resize\r\n  * Kiểm tra nếu mode === \"automatic\" thì sẽ tạo mới một interval\r\n  * để thay đổi hình ảnh - this.runAutomatic()\r\n  * với giá trị timeout được truyền từ props hoặc mặc định là 5000 ms\r\n  */\n  componentDidMount() {\n    this.rootElm = ReactDOM.findDOMNode(this);\n    this.containerElm = this.rootElm.querySelector(\".container\");\n    this.updateDimensions();\n    window.addEventListener(\"resize\", this.updateDimensions);\n    if (this.props.mode === \"automatic\") {\n      const timeout = this.props.timeout || 5000;\n      this.automaticInterval = setInterval(() => this.runAutomatic(), Number.parseInt(timeout));\n    }\n  }\n\n  /*\r\n  * Hàm này cũng thuộc về React Component Lifecycle -\r\n  * được gọi khi component này bị xóa khỏi màn hình\r\n  * Lúc này, mình phải hủy bỏ sự kiện khi resize\r\n  * và xóa bỏ interval đã khai bảo bên trên để tránh leak memory.\r\n  */\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.updateDimensions);\n    if (this.automaticInterval) clearInterval(this.automaticInterval);\n  }\n\n  /*\r\n  * Giao diện của component\r\n  * với phần tử ngoài cùng mình để className=\"lp-slideshow\"\r\n  * để tránh xung đột về tên với các component khác\r\n  */\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"lp-slideshow\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: [this.props.input.map((image, index) => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `slide ${this.state.slideIndex === index ? \"active\" : \"\"}`,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"number-text\",\n              children: `${index + 1} / ${this.props.input.length}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              className: \"image\",\n              src: image.src,\n              alt: image.caption\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"caption-text\",\n              children: image.caption\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 19\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 17\n          }, this);\n        }), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"prev\",\n          onClick: this.backward,\n          children: \"\\u276E\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"next\",\n          onClick: this.forward,\n          children: \"\\u276F\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dot-container\",\n        children: this.props.input.map((_, index) => {\n          return /*#__PURE__*/_jsxDEV(\"span\", {\n            className: `dot ${this.state.slideIndex === index ? \"active\" : \"\"}`,\n            onClick: () => this.setSlideIndex(index)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this);\n  }\n}","map":{"version":3,"names":["React","ReactDOM","jsxDEV","_jsxDEV","Slideshow","Component","constructor","props","state","slideIndex","ratioWHArray","ratio","split","ratioWH","backward","bind","forward","setSlideIndex","getNewSlideIndex","updateDimensions","runAutomatic","step","numberSlide","input","length","newSlideIndex","setState","index","containerElm","style","height","offsetWidth","componentDidMount","rootElm","findDOMNode","querySelector","window","addEventListener","mode","timeout","automaticInterval","setInterval","Number","parseInt","componentWillUnmount","removeEventListener","clearInterval","render","className","children","map","image","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","caption","onClick","_"],"sources":["E:/NewApp/Project_Nh-m2/my-app/src/Components/Slideshow/Slideshow.js"],"sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nexport default class Slideshow extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    /*\r\n    * State slideIndex dùng để xác định xem slide nào đang được active.\r\n    * Các ảnh sẽ được xếp chồng lên nhau, cái nào active thì hiển thị,\r\n    * Cái nào không active thì ẩn đi.\r\n    */\r\n    this.state = {\r\n      slideIndex: 0\r\n    };\r\n\r\n    /*\r\n    * Khi sử dụng, mình sẽ truyền thuộc tính ratio, giả sử là \"3:2\"\r\n    * Như vậy, tỉ lệ width/height là this.ratioWH = 3 / 2\r\n    * Mình sẽ điều chỉnh các ảnh sao cho về cùng 1 kích thước.\r\n    */\r\n    const ratioWHArray = this.props.ratio.split(\":\");\r\n    this.ratioWH = ratioWHArray[0] / ratioWHArray[1];\r\n\r\n    this.backward = this.backward.bind(this);\r\n    this.forward = this.forward.bind(this);\r\n    this.setSlideIndex = this.setSlideIndex.bind(this);\r\n    this.getNewSlideIndex = this.getNewSlideIndex.bind(this);\r\n    this.updateDimensions = this.updateDimensions.bind(this);\r\n    this.runAutomatic = this.runAutomatic.bind(this);\r\n  }\r\n\r\n  /*\r\n  * Tính chỉ số SlideIndex mới, với step là bước nhảy: +1 hoặc -1\r\n  * Giả sử, mình có 6 ảnh => các chỉ số lần lượt là: 0, 1, 2,...5\r\n  * Chú ý:\r\n  * Nếu đang ở chỉ số 5 mà đi về phía trước thì slideIndex = 0\r\n  * Nếu đang ở chỉ số 0 mà về sau thì slideIndex = 5\r\n  */\r\n  getNewSlideIndex(step) {\r\n    const slideIndex = this.state.slideIndex;\r\n    const numberSlide = this.props.input.length;\r\n\r\n    let newSlideIndex = slideIndex + step;\r\n\r\n    if (newSlideIndex >= numberSlide) newSlideIndex = 0;\r\n    else if (newSlideIndex < 0) newSlideIndex = numberSlide - 1;\r\n\r\n    return newSlideIndex;\r\n  }\r\n\r\n  // Quay về ảnh phía trước, tức index giảm 1 => step = -1\r\n  backward() {\r\n    this.setState({\r\n      slideIndex: this.getNewSlideIndex(-1)\r\n    });\r\n  }\r\n\r\n  // Tiến tới ảnh phía sau, tức index tăng 1 => step = 1\r\n  forward() {\r\n    this.setState({\r\n      slideIndex: this.getNewSlideIndex(1)\r\n    });\r\n  }\r\n\r\n  // Xác định slideIndex nào sẽ được active\r\n  setSlideIndex(index) {\r\n    this.setState({\r\n      slideIndex: index\r\n    })\r\n  }\r\n\r\n  /*\r\n  * Cập nhật chiều cao cho container khi thay đổi kích thước màn hình\r\n  * Trong phần CSS, mình để container có width = 100%,\r\n  * Nên dù kéo to hay thu nhỏ thì width vẫn bằng 100%\r\n  * Nhưng chiều cao phải tính lại dựa vào width và tỉ lệ this.ratioWH\r\n  */\r\n  updateDimensions() {\r\n    this.containerElm.style.height \r\n      = `${this.containerElm.offsetWidth / this.ratioWH}px`;\r\n  }\r\n\r\n  /*\r\n  * Nếu người dùng truyền vào thuộc tính mode = automatic\r\n  * thì Slideshow sẽ chạy tự động dựa vào interval.\r\n  * Hàm này sẽ được gọi trong mỗi lượt lặp lại\r\n  * để cập nhật slideIndex mới cho Slideshow\r\n  */\r\n  runAutomatic() {\r\n    this.setState({\r\n      slideIndex: this.getNewSlideIndex(1)\r\n    });\r\n  }\r\n\r\n  /*\r\n  * Hàm này thuộc về React Component Lifecycle\r\n  * được gọi sau khi component này được render xong\r\n  * Trong đây, sẽ lưu lại reference cho container - this.containerElm\r\n  * Cập nhật lại chiều cao cho container - this.updateDimensions();\r\n  * Đăng ký sự kiện thay đổi kích thước - resize\r\n  * Kiểm tra nếu mode === \"automatic\" thì sẽ tạo mới một interval\r\n  * để thay đổi hình ảnh - this.runAutomatic()\r\n  * với giá trị timeout được truyền từ props hoặc mặc định là 5000 ms\r\n  */\r\n  componentDidMount() {\r\n    this.rootElm = ReactDOM.findDOMNode(this);\r\n    this.containerElm = this.rootElm.querySelector(\".container\");\r\n\r\n    this.updateDimensions();\r\n    window.addEventListener(\"resize\", this.updateDimensions);\r\n\r\n    if (this.props.mode === \"automatic\") {\r\n      const timeout = this.props.timeout || 5000;\r\n\r\n      this.automaticInterval = setInterval(\r\n        () => this.runAutomatic(),\r\n        Number.parseInt(timeout)\r\n      );\r\n    }\r\n  }\r\n\r\n  /*\r\n  * Hàm này cũng thuộc về React Component Lifecycle -\r\n  * được gọi khi component này bị xóa khỏi màn hình\r\n  * Lúc này, mình phải hủy bỏ sự kiện khi resize\r\n  * và xóa bỏ interval đã khai bảo bên trên để tránh leak memory.\r\n  */\r\n  componentWillUnmount() {\r\n    window.removeEventListener(\"resize\", this.updateDimensions);\r\n    if (this.automaticInterval) clearInterval(this.automaticInterval);\r\n  }\r\n\r\n  /*\r\n  * Giao diện của component\r\n  * với phần tử ngoài cùng mình để className=\"lp-slideshow\"\r\n  * để tránh xung đột về tên với các component khác\r\n  */\r\n  render() {\r\n    return (\r\n      <div className=\"lp-slideshow\">\r\n        <div className=\"container\">\r\n          {\r\n            this.props.input.map((image, index) => {\r\n              return (\r\n                <div\r\n                  key={index}\r\n                  className={\r\n                    `slide ${this.state.slideIndex === index ? \"active\" : \"\"}`\r\n                  }\r\n                >\r\n                  <div className=\"number-text\">\r\n                    {`${index + 1} / ${this.props.input.length}`}\r\n                  </div>\r\n                  <img className=\"image\" src={image.src} alt={image.caption} />\r\n                  <div className=\"caption-text\">{image.caption}</div>\r\n                </div>\r\n              )\r\n            })\r\n          }\r\n\r\n          <span className=\"prev\" onClick={this.backward}>❮</span>\r\n          <span className=\"next\" onClick={this.forward}>❯</span>\r\n        </div>\r\n\r\n        <div className=\"dot-container\">\r\n          {\r\n            this.props.input.map((_, index) => {\r\n              return (\r\n                <span\r\n                  key={index}\r\n                  className={\r\n                    `dot ${this.state.slideIndex === index ? \"active\" : \"\"}`\r\n                  }\r\n                  onClick={() => this.setSlideIndex(index)}\r\n                >\r\n                </span>\r\n              )\r\n            })\r\n          }\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjC,eAAe,MAAMC,SAAS,SAASJ,KAAK,CAACK,SAAS,CAAC;EACrDC,WAAWA,CAACC,KAAK,EAAE;IACjB,KAAK,CAACA,KAAK,CAAC;;IAEZ;AACJ;AACA;AACA;AACA;IACI,IAAI,CAACC,KAAK,GAAG;MACXC,UAAU,EAAE;IACd,CAAC;;IAED;AACJ;AACA;AACA;AACA;IACI,MAAMC,YAAY,GAAG,IAAI,CAACH,KAAK,CAACI,KAAK,CAACC,KAAK,CAAC,GAAG,CAAC;IAChD,IAAI,CAACC,OAAO,GAAGH,YAAY,CAAC,CAAC,CAAC,GAAGA,YAAY,CAAC,CAAC,CAAC;IAEhD,IAAI,CAACI,QAAQ,GAAG,IAAI,CAACA,QAAQ,CAACC,IAAI,CAAC,IAAI,CAAC;IACxC,IAAI,CAACC,OAAO,GAAG,IAAI,CAACA,OAAO,CAACD,IAAI,CAAC,IAAI,CAAC;IACtC,IAAI,CAACE,aAAa,GAAG,IAAI,CAACA,aAAa,CAACF,IAAI,CAAC,IAAI,CAAC;IAClD,IAAI,CAACG,gBAAgB,GAAG,IAAI,CAACA,gBAAgB,CAACH,IAAI,CAAC,IAAI,CAAC;IACxD,IAAI,CAACI,gBAAgB,GAAG,IAAI,CAACA,gBAAgB,CAACJ,IAAI,CAAC,IAAI,CAAC;IACxD,IAAI,CAACK,YAAY,GAAG,IAAI,CAACA,YAAY,CAACL,IAAI,CAAC,IAAI,CAAC;EAClD;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACEG,gBAAgBA,CAACG,IAAI,EAAE;IACrB,MAAMZ,UAAU,GAAG,IAAI,CAACD,KAAK,CAACC,UAAU;IACxC,MAAMa,WAAW,GAAG,IAAI,CAACf,KAAK,CAACgB,KAAK,CAACC,MAAM;IAE3C,IAAIC,aAAa,GAAGhB,UAAU,GAAGY,IAAI;IAErC,IAAII,aAAa,IAAIH,WAAW,EAAEG,aAAa,GAAG,CAAC,CAAC,KAC/C,IAAIA,aAAa,GAAG,CAAC,EAAEA,aAAa,GAAGH,WAAW,GAAG,CAAC;IAE3D,OAAOG,aAAa;EACtB;;EAEA;EACAX,QAAQA,CAAA,EAAG;IACT,IAAI,CAACY,QAAQ,CAAC;MACZjB,UAAU,EAAE,IAAI,CAACS,gBAAgB,CAAC,CAAC,CAAC;IACtC,CAAC,CAAC;EACJ;;EAEA;EACAF,OAAOA,CAAA,EAAG;IACR,IAAI,CAACU,QAAQ,CAAC;MACZjB,UAAU,EAAE,IAAI,CAACS,gBAAgB,CAAC,CAAC;IACrC,CAAC,CAAC;EACJ;;EAEA;EACAD,aAAaA,CAACU,KAAK,EAAE;IACnB,IAAI,CAACD,QAAQ,CAAC;MACZjB,UAAU,EAAEkB;IACd,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;AACA;AACA;AACA;EACER,gBAAgBA,CAAA,EAAG;IACjB,IAAI,CAACS,YAAY,CAACC,KAAK,CAACC,MAAM,GACzB,GAAE,IAAI,CAACF,YAAY,CAACG,WAAW,GAAG,IAAI,CAAClB,OAAQ,IAAG;EACzD;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEO,YAAYA,CAAA,EAAG;IACb,IAAI,CAACM,QAAQ,CAAC;MACZjB,UAAU,EAAE,IAAI,CAACS,gBAAgB,CAAC,CAAC;IACrC,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEc,iBAAiBA,CAAA,EAAG;IAClB,IAAI,CAACC,OAAO,GAAGhC,QAAQ,CAACiC,WAAW,CAAC,IAAI,CAAC;IACzC,IAAI,CAACN,YAAY,GAAG,IAAI,CAACK,OAAO,CAACE,aAAa,CAAC,YAAY,CAAC;IAE5D,IAAI,CAAChB,gBAAgB,CAAC,CAAC;IACvBiB,MAAM,CAACC,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAAClB,gBAAgB,CAAC;IAExD,IAAI,IAAI,CAACZ,KAAK,CAAC+B,IAAI,KAAK,WAAW,EAAE;MACnC,MAAMC,OAAO,GAAG,IAAI,CAAChC,KAAK,CAACgC,OAAO,IAAI,IAAI;MAE1C,IAAI,CAACC,iBAAiB,GAAGC,WAAW,CAClC,MAAM,IAAI,CAACrB,YAAY,CAAC,CAAC,EACzBsB,MAAM,CAACC,QAAQ,CAACJ,OAAO,CACzB,CAAC;IACH;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEK,oBAAoBA,CAAA,EAAG;IACrBR,MAAM,CAACS,mBAAmB,CAAC,QAAQ,EAAE,IAAI,CAAC1B,gBAAgB,CAAC;IAC3D,IAAI,IAAI,CAACqB,iBAAiB,EAAEM,aAAa,CAAC,IAAI,CAACN,iBAAiB,CAAC;EACnE;;EAEA;AACF;AACA;AACA;AACA;EACEO,MAAMA,CAAA,EAAG;IACP,oBACE5C,OAAA;MAAK6C,SAAS,EAAC,cAAc;MAAAC,QAAA,gBAC3B9C,OAAA;QAAK6C,SAAS,EAAC,WAAW;QAAAC,QAAA,GAEtB,IAAI,CAAC1C,KAAK,CAACgB,KAAK,CAAC2B,GAAG,CAAC,CAACC,KAAK,EAAExB,KAAK,KAAK;UACrC,oBACExB,OAAA;YAEE6C,SAAS,EACN,SAAQ,IAAI,CAACxC,KAAK,CAACC,UAAU,KAAKkB,KAAK,GAAG,QAAQ,GAAG,EAAG,EAC1D;YAAAsB,QAAA,gBAED9C,OAAA;cAAK6C,SAAS,EAAC,aAAa;cAAAC,QAAA,EACxB,GAAEtB,KAAK,GAAG,CAAE,MAAK,IAAI,CAACpB,KAAK,CAACgB,KAAK,CAACC,MAAO;YAAC;cAAA4B,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACzC,CAAC,eACNpD,OAAA;cAAK6C,SAAS,EAAC,OAAO;cAACQ,GAAG,EAAEL,KAAK,CAACK,GAAI;cAACC,GAAG,EAAEN,KAAK,CAACO;YAAQ;cAAAN,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,eAC7DpD,OAAA;cAAK6C,SAAS,EAAC,cAAc;cAAAC,QAAA,EAAEE,KAAK,CAACO;YAAO;cAAAN,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC;UAAA,GAT9C5B,KAAK;YAAAyB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAUP,CAAC;QAEV,CAAC,CAAC,eAGJpD,OAAA;UAAM6C,SAAS,EAAC,MAAM;UAACW,OAAO,EAAE,IAAI,CAAC7C,QAAS;UAAAmC,QAAA,EAAC;QAAC;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eACvDpD,OAAA;UAAM6C,SAAS,EAAC,MAAM;UAACW,OAAO,EAAE,IAAI,CAAC3C,OAAQ;UAAAiC,QAAA,EAAC;QAAC;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnD,CAAC,eAENpD,OAAA;QAAK6C,SAAS,EAAC,eAAe;QAAAC,QAAA,EAE1B,IAAI,CAAC1C,KAAK,CAACgB,KAAK,CAAC2B,GAAG,CAAC,CAACU,CAAC,EAAEjC,KAAK,KAAK;UACjC,oBACExB,OAAA;YAEE6C,SAAS,EACN,OAAM,IAAI,CAACxC,KAAK,CAACC,UAAU,KAAKkB,KAAK,GAAG,QAAQ,GAAG,EAAG,EACxD;YACDgC,OAAO,EAAEA,CAAA,KAAM,IAAI,CAAC1C,aAAa,CAACU,KAAK;UAAE,GAJpCA,KAAK;YAAAyB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAMN,CAAC;QAEX,CAAC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAED,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAEV;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}